"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3015],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=p(n),d=a,m=h["".concat(l,".").concat(d)]||h[d]||c[d]||i;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2025:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return h}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:1},l="Installation",p={unversionedId:"tasks/installation",id:"tasks/installation",title:"Installation",description:"This article explains how to install the Gitploy server for GitHub.",source:"@site/docs/tasks/installation.md",sourceDirName:"tasks",slug:"/tasks/installation",permalink:"/docs/tasks/installation",editUrl:"https://github.com/gitploy-io/website/tree/main/docs/tasks/installation.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"License",permalink:"/docs/concepts/license"},next:{title:"Database",permalink:"/docs/tasks/database"}},u=[{value:"Step 1: Preparation",id:"step-1-preparation",children:[{value:"Provision an instance",id:"provision-an-instance",children:[],level:3},{value:"Create an OAuth Application",id:"create-an-oauth-application",children:[],level:3}],level:2},{value:"Step 2: Configuration",id:"step-2-configuration",children:[],level:2},{value:"Step 3: Start server",id:"step-3-start-server",children:[{value:"Docker",id:"docker",children:[],level:3},{value:"Kubernetes",id:"kubernetes",children:[],level:3}],level:2},{value:"Pro tips",id:"pro-tips",children:[{value:"Persistence",id:"persistence",children:[],level:3},{value:"Security",id:"security",children:[],level:3}],level:2}],c={toc:u};function h(e){var t=e.components,s=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"installation"},"Installation"),(0,i.kt)("p",null,"This article explains how to install the Gitploy server for GitHub."),(0,i.kt)("h2",{id:"step-1-preparation"},"Step 1: Preparation"),(0,i.kt)("h3",{id:"provision-an-instance"},"Provision an instance"),(0,i.kt)("p",null,"The server should be installed on a server or virtual machine with standard http and https ports open. "),(0,i.kt)("h3",{id:"create-an-oauth-application"},"Create an OAuth Application"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app"},"Create a GitHub OAuth application.")," The Client Key and Client Secret are used to authorize access to GitHub resources."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"The authorization callback URL must match with the format:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"GITPLOY_SERVER_PROTO://GITPLOY_SERVER_HOST/signin"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Github OAuth",src:n(9800).Z,width:"911",height:"663"})),(0,i.kt)("h2",{id:"step-2-configuration"},"Step 2: Configuration"),(0,i.kt)("p",null,"The server is configured using environment variables. This article only configures with least environment. See Configurations for a complete list of configuration options."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"GITPLOY_SERVER_HOST"),":\nRequired string value configures the user-facing hostname. This value is used to create webhooks and redirect urls. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"GITPLOY_SERVER_PROTO"),":\nOptional string value configures the user-facing protocol. This value is used to create webhooks and redirect urls. It can be one of them: ",(0,i.kt)("inlineCode",{parentName:"p"},"http")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"https"),", and the default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"https"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"GITPLOY_GITHUB_CLIENT_ID"),":\nRequired string value configures the GitHub OAuth client id. This is used to authorize access to GitHub on behalf of a Gitploy user.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"GITPLOY_GITHUB_CLIENT_SECRET"),":\nRequired string value configures the GitHub OAuth client secret. This is used to authorize access to GitHub on behalf of a Gitploy user."))),(0,i.kt)("h2",{id:"step-3-start-server"},"Step 3: Start server"),(0,i.kt)("h3",{id:"docker"},"Docker"),(0,i.kt)("p",null,"The server is distributed as a Docker image. The image is self-contained and does not have any external dependencies. We recommend to use the last version."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"docker pull gitployio/gitploy:0.4\n")),(0,i.kt)("p",null,"The server container can be started with the below command. The container is configured through environment variables."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"docker run \\\n  --volume=/var/lib/gitploy:/data \\\n  --env=GITPLOY_SERVER_HOST={{GITPLOY_SERVER_HOST}} \\\n  --env=GITPLOY_SERVER_PROTO={{GITPLOY_SERVER_PROTO}} \\\n  --env=GITPLOY_GITHUB_CLIENT_ID={{GITPLOY_GITHUB_CLIENT_ID}} \\\n  --env=GITPLOY_GITHUB_CLIENT_SECRET={{GITPLOY_GITHUB_CLIENT_SECRET}} \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=gitploy \\\n  gitployio/gitploy:0.6\n")),(0,i.kt)("h3",{id:"kubernetes"},"Kubernetes"),(0,i.kt)("p",null,"The server can be started in Kubernetes with the below artifacts. The container is configured through environment variables."),(0,i.kt)("p",null,"And we\u2019re also support the official Helm chart to install the server, check ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gitploy-io/helm-chart"},"here")," for details."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Kubernetes YAML"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Service\nmetadata:\n  name: gitploy\n  labels:\n    app.kubernetes.io/name: gitploy\nspec:\n  type: ClusterIP\n  ports:\n    - port: 80\n      targetPort: http\n      protocol: TCP\n      name: http\n  selector:\n    app.kubernetes.io/name: gitploy\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: gitploy\n  labels:\n    app.kubernetes.io/name: gitploy\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: gitploy\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: gitploy\n    spec:\n      containers:\n        - name: gitploy-server\n          image: "gitployio/gitploy:0.6"\n          imagePullPolicy: IfNotPresent\n          ports:\n            - name: http\n              containerPort: 80\n              protocol: TCP\n          # Fill out values of environments\n          env:\n            - name: GITPLOY_SERVER_HOST\n              value: ""\n            - name: GITPLOY_SERVER_PROTO\n              value: ""\n            - name: GITPLOY_GITHUB_CLIENT_ID\n              value: ""\n            - name: GITPLOY_GITHUB_CLIENT_SECRET\n              value: ""\n'))),(0,i.kt)("h2",{id:"pro-tips"},"Pro tips"),(0,i.kt)("h3",{id:"persistence"},"Persistence"),(0,i.kt)("p",null,"Gitploy uses an embedded SQLite database by default, and it stores all of the data in a single file. For persistence, you have to attach the volume to the path of the database (i.e., ",(0,i.kt)("a",{parentName:"p",href:"../references/configurations/GITPLOY_STORE_SOURCE"},"GITPLOY_STORE_SOURCE"),") in the container. You can check the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-started/05_persisting_data/#persist-the-todo-data"},"example")," on how to mount the volume in Docker."),(0,i.kt)("p",null,"And if you need alternative database, MySQL and Postgres, you should check the ",(0,i.kt)("a",{parentName:"p",href:"/docs/tasks/database"},"database")," documentation."),(0,i.kt)("h3",{id:"security"},"Security"),(0,i.kt)("p",null,"The server receives the webhook through the internet, and it could be a security issue. So you probably want to limit requests to those coming from GitHub. To ensure your server is only receiving the expected GitHub request, you must configure the secret token. You can configure it by ",(0,i.kt)("a",{parentName:"p",href:"../references/configurations/GITPLOY_WEBHOOK_SECRET"},"GITPLOY_WEBHOOK_SECRET"),"."))}h.isMDXComponent=!0},9800:function(e,t,n){t.Z=n.p+"assets/images/github-oauth-6f98cfd98c5e04e546437593525a0961.png"}}]);