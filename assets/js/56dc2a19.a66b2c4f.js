"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3072],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=s(n),m=o,h=c["".concat(l,".").concat(m)]||c[m]||u[m]||i;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=c;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,r[1]=p;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7480:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return d},default:function(){return c}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),r=["components"],p={sidebar_position:3},l="Integration",s={unversionedId:"tasks/integration",id:"tasks/integration",title:"Integration",description:"Deployment API",source:"@site/docs/tasks/integration.md",sourceDirName:"tasks",slug:"/tasks/integration",permalink:"/docs/tasks/integration",editUrl:"https://github.com/gitploy-io/website/tree/main/docs/tasks/integration.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"CLI",permalink:"/docs/tasks/cli"},next:{title:"deploy.yml",permalink:"/docs/references/deploy.yml"}},d=[{value:"Deployment API",id:"deployment-api",children:[{value:"GitHub Action",id:"github-action",children:[{value:"Listening for an event",id:"listening-for-an-event",children:[],level:4},{value:"Update the deployment status",id:"update-the-deployment-status",children:[],level:4}],level:3},{value:"Drone CI",id:"drone-ci",children:[{value:"Listening for an event",id:"listening-for-an-event-1",children:[],level:4},{value:"Update the deployment status",id:"update-the-deployment-status-1",children:[],level:4}],level:3},{value:"Spinnaker",id:"spinnaker",children:[{value:"Listening for an event",id:"listening-for-an-event-2",children:[],level:4},{value:"Update the deployment status",id:"update-the-deployment-status-2",children:[],level:4}],level:3},{value:"Internal Deployment Tooling",id:"internal-deployment-tooling",children:[],level:3}],level:2},{value:"Notification",id:"notification",children:[{value:"Slack",id:"slack",children:[{value:"Step 1: Create App",id:"step-1-create-app",children:[],level:4},{value:"Step 2: Configure Permissions",id:"step-2-configure-permissions",children:[],level:4},{value:"Step 3: Run Server With App Credentials",id:"step-3-run-server-with-app-credentials",children:[],level:4}],level:3}],level:2}],u={toc:d};function c(e){var t=e.components,p=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},u,p,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"integration"},"Integration"),(0,i.kt)("h2",{id:"deployment-api"},"Deployment API"),(0,i.kt)("p",null,"As described in the '",(0,i.kt)("a",{parentName:"p",href:"/docs/concepts/how-it-work"},"How it works"),"' document, two preparations are required to connect with the deployment API; 1) Make sure your deployment tooling is listening for the Github ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#deployment"},"deployment")," event. 2) Update the deployment status by ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/rest/reference/deployments#create-a-deployment-status"},"API")," after execution is complete. This document will show how you can connect with the mainstream deployment tools."),(0,i.kt)("h3",{id:"github-action"},"GitHub Action"),(0,i.kt)("h4",{id:"listening-for-an-event"},"Listening for an event"),(0,i.kt)("p",null,"GitHub Action provides the ",(0,i.kt)("inlineCode",{parentName:"p"},"on")," syntax to define the type of activity that will trigger a workflow run, and it supports the deployment event. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"on:\n  deployment\n")),(0,i.kt)("p",null,"And you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," conditional to run a job when an environment is met. You can use context to access the deployment environment."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n  deploy-production:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.deployment.environment === 'production' }}\n")),(0,i.kt)("h4",{id:"update-the-deployment-status"},"Update the deployment status"),(0,i.kt)("p",null,"The third-party plugin, ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/chrnorm/deployment-status"},"chrnorm/deployment-status"),", provides that a GitHub action updates the status of deployments as part of your GitHub CI workflows."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'jobs:\n  deploy-dev:\n    runs-on: ubuntu-latest\n    steps:\n      ...\n      - \n        name: Update the deployment status\n        uses: chrnorm/deployment-status@releases/v1\n        with:\n          token: "${{ github.token }}"\n          deployment_id: ${{ github.event.deployment.id }}\n          description: Finish to deploy successfully.\n          state: "success"\n')),(0,i.kt)("p",null,"You can reference this ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gitploy-io/gitploy/discussions/178"},"example")," for integrating with GitHub action."),(0,i.kt)("h3",{id:"drone-ci"},"Drone CI"),(0,i.kt)("h4",{id:"listening-for-an-event-1"},"Listening for an event"),(0,i.kt)("p",null,"Drone CI provides the ",(0,i.kt)("inlineCode",{parentName:"p"},"trigger")," field to limit pipeline execution based on the drone event type, supporting the ",(0,i.kt)("inlineCode",{parentName:"p"},"promote")," event. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"trigger:\n  event:\n  - promote\n")),(0,i.kt)("p",null,"And you can access the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.drone.io/pipeline/environment/reference/drone-deploy-to/"},(0,i.kt)("inlineCode",{parentName:"a"},"DRONE_DEPLOY_TO"))," environment by the environment if you need the conditional step. "),(0,i.kt)("h4",{id:"update-the-deployment-status-1"},"Update the deployment status"),(0,i.kt)("p",null,"The third-party plugin, ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cedrichopf/drone-status"},"cedrichopf/drone-status"),", provides that a Drone CI updates the status of deployments as part of your CI pipelines."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"steps:\n  - name: Update the deployment status\n    image: cedrichopf/drone-status\n    settings:\n      api_token:\n        from_secret: GITHUB_TOKEN \n      context: deploy\n      state: success\n      description: Finish to deploy successfully.\n")),(0,i.kt)("h3",{id:"spinnaker"},"Spinnaker"),(0,i.kt)("h4",{id:"listening-for-an-event-2"},"Listening for an event"),(0,i.kt)("p",null,"The trigger type has to be the webhook type to listen to an event, and the constraints verify repository and environment to determine if triggered or not. "),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Spinnaker Webhook Trigger",src:n(1569).Z,width:"1049",height:"434"})),(0,i.kt)("h4",{id:"update-the-deployment-status-2"},"Update the deployment status"),(0,i.kt)("p",null,"Spinnaker provides a simple way to add a custom stage to call API instead of extending through codes. Spinnaker can typically make API calls as part of a pipeline by adding a custom stage."),(0,i.kt)("p",null,"To create a custom webhook, we have to add the configuration to the ",(0,i.kt)("inlineCode",{parentName:"p"},"orca-local.yml")," file, located in ",(0,i.kt)("inlineCode",{parentName:"p"},"$HOME/.hal/default/profiles"),". And the custom stage has a few variables, ",(0,i.kt)("inlineCode",{parentName:"p"},"owner"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"repo"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"deployment_id"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"description"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"state"),", for updating the deployment status dynamically. You can set up the variables for your project."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Custom Stage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'webhook:\n  preconfigured:\n    - label: Update Deployment status\n      type: updateDeploymentStatus\n      enabled: true\n      description: Update the deployment status.\n      method: POST\n      url: https://api.github.com/repos/${ parameterValues[\'owner\'] }/${ parameterValues[\'repo\'] }/deployments/${ parameterValues[\'deployment_id\'] }/statuses\n      customHeaders:\n        # Replace with your GitHub token.\n        Authorization:\n          - token GITHUB_TOKEN\n        Content-Type:\n          - application/json\n      payload: |-\n        {\n          "description": "${parameterValues[\'description\']}",\n          "state": "${parameterValues[\'state\']}",\n          "log_url": "http://localhost:9000/#/applications/${execution.application}/executions/details/${execution.id}"\n        }\n      parameters:\n        - label: GitHub Owner\n          name: owner\n          type: string\n        - label: GitHub Repo\n          name: repo\n          type: string\n        - lable: Deployment ID\n          name: deployment_id\n          type: string\n        - label: Description\n          name: description\n          type: string\n        - label: State\n          name: state\n          type: string\n          description: The state can be one of "queued", "in_progress", "success", "failure"\n'))),(0,i.kt)("p",null,"You can reference the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gitploy-io/spinnaker-demo"},"spinnaker demo")," for integrating with Spinnaker."),(0,i.kt)("h3",{id:"internal-deployment-tooling"},"Internal Deployment Tooling"),(0,i.kt)("p",null,"GitHub provides a well-organized ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/rest/guides/delivering-deployments"},"document")," to guide to build an internal deployment tooling to deploy on your servers with the Deployment API. "),(0,i.kt)("h2",{id:"notification"},"Notification"),(0,i.kt)("h3",{id:"slack"},"Slack"),(0,i.kt)("h4",{id:"step-1-create-app"},"Step 1: Create App"),(0,i.kt)("p",null,"Firstly, we have to create ",(0,i.kt)("a",{parentName:"p",href:"https://api.slack.com/apps"},"Slack App"),". You should click the Create App button and fill out inputs."),(0,i.kt)("h4",{id:"step-2-configure-permissions"},"Step 2: Configure Permissions"),(0,i.kt)("p",null,"After creating App, we move to the ",(0,i.kt)("em",{parentName:"p"},"OAuth & Permissions")," page and set up ",(0,i.kt)("em",{parentName:"p"},"the redirect URLs")," and ",(0,i.kt)("em",{parentName:"p"},"Bot Token scopes"),"on this page. Firstly, you should add a new redirect URL with the ",(0,i.kt)("inlineCode",{parentName:"p"},"GITPLOY_SERVER_PROTO://GITPLOY_SERVER_HOST/slack/signin")," format; secondly, add ",(0,i.kt)("inlineCode",{parentName:"p"},"chat:write")," scope into the Bot Token scopes."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Slack Bot Token Sceops",src:n(3435).Z,width:"663",height:"326"})),(0,i.kt)("h4",{id:"step-3-run-server-with-app-credentials"},"Step 3: Run Server With App Credentials"),(0,i.kt)("p",null,"To enable Slack integration, you have to set up these environments when you run the server: ",(0,i.kt)("inlineCode",{parentName:"p"},"GITPLOY_SLACK_CLIENT_ID")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"GITPLOY_SLACK_CLIENT_SECRET"),". You can get these credentials from ",(0,i.kt)("em",{parentName:"p"},"App Credentials")," section of ",(0,i.kt)("em",{parentName:"p"},"Basic Information")," page."))}c.isMDXComponent=!0},3435:function(e,t,n){t.Z=n.p+"assets/images/slack-bot-token-scopes-0d33b8a61ade6487abbb0c917d741e15.png"},1569:function(e,t,n){t.Z=n.p+"assets/images/spinnaker-trigger-a3592d7fbccfc0dc1e37e71dbd45c413.png"}}]);